<?xml version="1.0" encoding="UTF-8"?>
<config xmlns:root="http://project.hasor.net/hasor/schema/main" xmlns="http://project.hasor.net/hasor/schema/hasor-rsf">
	<!-- 框架配置 -->
	<hasor>
		<!-- 包扫描范围 -->
		<loadPackages>net.hasor.rsf.*</loadPackages>
		<!-- Hasor-RSF 专用 -->
		<rsfConfig address="local" port="8000">

			<!--
				用于设置默认情况下RSF服务的一些基本信息。
					version = 在未指定注册服务的版本信息时使用下面这个配置。
					group   = 在未指定注册服务的分组信息时使用下面这个配置。
					timeout = 在未指定注册服务的超时时间情况下使用下面这个配置。
			-->
			<defaultServiceValue version="1.0.0" group="RSF" timeout="6000"/>

			<!--
				用于更新服务列表的配置服务器
					如果配置 loadType = auto，表示从现有网络上自动发现。
					如果配置 loadType = host，表示从指定的服务器上获取更新（60秒）
			-->
			<configServer loadType="auto" address="local" port="8000" interval="60000" />

			<!--
				通用配置
					defaultTimeout	客户端请求超时时间
					maximumRequest	最大并发请求数
					sendLimitPolicy	并发调用请求限制策略，当并发调用达到限制值后的策略（Reject 抛出异常，WaitSecond 等待1秒重试）
			-->
			<client defaultTimeout="6000" maximumRequest="200" sendLimitPolicy="Reject"/>

			<!--
				处理队列配置（用于配置ExecutesManager）
					maxSize
						处理任务队列的最小大小，作为服务端当队列满了之后所有新进来的请求都会被回应 ChooseOther。
					minPoolSize
						the number of threads to keep in the pool, even if they are idle, unless allowCoreThreadTimeOut is set.
					maxPoolSize
						the maximum number of threads to allow in the pool.
					keepAliveTime(SECONDS)
						when the number of threads is greater than the core, this is the maximum time that excess idle threads will wait for new tasks before terminating.
			-->
			<queue maxSize="4096" minPoolSize="1" maxPoolSize="4" keepAliveTime="300" />

			<!--
				网络数据包线程配置（）
					workerThread	处理网络IO数据包的线程数。
					listenThread	处理网络监听请求的线程数。
			-->
			<network workerThread="8" listenThread="1"/>

			<!-- 作为服务端向客户端响应时携带的选项 -->
			<serverOptionSet>
				<option key="identity">Response</option>
			</serverOptionSet>

			<!-- 作为客户端向服务端发送调用请求时携带的选项 -->
			<clientOptionSet>
				<option key="identity">Request</option>
			</clientOptionSet>

			<!-- 序列器（在修改序列化方式时，需要确保远程和本地都支持） -->
			<serializeType default="Hessian">
				<!-- JSON-格式序列化 -->
				<!-- <serialize name="Json">net.hasor.rsf.serialize.coder.FastJsonSerializeCoder</serialize> -->
				<!-- Java-原生序列化 -->
				<serialize name="Java">net.hasor.rsf.serialize.coder.JavaSerializeCoder</serialize>
				<!-- Hessian-格式序列化 -->
				<serialize name="Hessian">net.hasor.rsf.serialize.coder.HessianSerializeCoder</serialize>
				<!-- BlackHole-黑洞序列化 -->
				<serialize name="BlackHole">net.hasor.rsf.serialize.coder.BlackHoleSerializeCoder</serialize>
			</serializeType>
		</rsfConfig>
	</hasor>
</config>